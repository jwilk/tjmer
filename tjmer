#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2019-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import os
import re
import shutil
import signal
import sys
import textwrap
import time

int(0_0)  # Python >= 3.6 is required

class MonotonicTimer:

    @staticmethod
    def _now():
        return time.clock_gettime(time.CLOCK_MONOTONIC)

    def __init__(self, timeout):
        start = self._now()
        self._end = start + timeout

    def __float__(self):
        return self._end - self._now()

class UnixTimer:

    def __init__(self, ts):
        self._end = ts

    def __float__(self):
        return self._end - time.time()

def parse_time(s):
    if s[:1] == '@':
        return parse_hms_time(s)
    return parse_time_delta(s)
parse_time.__name__ = 'time'

def parse_hms_time(s):
    for fmt in ('%H:%M', '%H:%M:%S'):
        try:
            tm = datetime.datetime.strptime(s, '@' + fmt).time()
        except ValueError:
            continue
        else:
            break
    else:
        raise ValueError
    now = datetime.datetime.now()
    dt = now.combine(now.date(), tm)
    ts = dt.timestamp()
    if ts <= now.timestamp():
        ts += datetime.timedelta(days=1).total_seconds()
    return UnixTimer(ts)

def parse_time_delta(s):
    item_re = '[0-9]+[smhd]'
    if not re.fullmatch(f'({item_re})+', s):
        raise ValueError
    dt = 0
    for item in re.findall(item_re, s):
        n = int(item[:-1])
        unit = item[-1]
        dt += n * dict(
            d = 24 * 60 * 60,
            h =      60 * 60,
            m =           60,
            s =            1,
        )[unit]
    return MonotonicTimer(dt)

def xdivmod(n, *ds):
    for d in ds:
        n, r = divmod(n, d)
        yield r
    yield n

def fmt_time(t):
    # work-around for <https://github.com/pylint-dev/pylint/issues/10080>:
    # pylint: disable=using-constant-test
    t = round(t)
    [s, m, h, d] = xdivmod(t, 60, 60, 24)
    r = ''
    if d:
        r += f'{d}d'
    if h:
        r += f'{h}h'
    if m:
        r += f'{m}m'
    if s or (t == 0):
        r += f'{s}s'
    return r

def wait(timer):
    def eprint(*args, **kwargs):
        print(*args, **kwargs, end='', file=sys.stderr, flush=True)
    while True:
        tm_rem = float(timer)
        if tm_rem <= 0:
            break
        eprint('\r\033[2K', fmt_time(tm_rem), sep='')
        tm_sleep = tm_rem % 1
        if tm_sleep == 0:
            tm_sleep = 1
        time.sleep(tm_sleep)
    eprint('\r\033[2K')

def execvp(*cmdline):
    os.execvp(cmdline[0], cmdline)

def main():
    ap = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'  # pylint: disable=protected-access
    ap.add_argument('timeout', metavar='TIME', type=parse_time,
        help=textwrap.dedent('''
        how long to wait:
          Nd = N days
          Nh = N hours
          Nm = N minutes
          Ns = N seconds
        or concatenation of any of the above;
        or until when to wait:
          @HH:MM
          @HH:MM:SS
        ''').lstrip()
    )
    ap.add_argument('cmd', metavar='COMMAND', nargs='?',
        help='command to execute instead of printing BEL'
    )
    ap.add_argument('args', metavar='ARGS', nargs=argparse.REMAINDER, help=argparse.SUPPRESS)
    opts = ap.parse_args()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    if opts.cmd is None:
        if opts.args:
            cmd = opts.args
        else:
            cmd = os.getenv('TJMER_COMMAND')
            if cmd:
                cmd = ['sh', '-c', cmd]
    else:
        cmd = [opts.cmd, *opts.args]
    if cmd and not shutil.which(cmd[0]):
        prog = ap.prog
        if '/' in cmd[0]:
            try:
                os.stat(cmd[0])
            except OSError as exc:
                print(f'{prog}: {cmd[0]}: {exc.strerror}', file=sys.stderr)
                sys.exit(1)
        print(f'{prog}: {cmd[0]}: command not found', file=sys.stderr)
        sys.exit(1)
    wait(opts.timeout)
    if not cmd:
        print('\a')
        return
    try:
        os.execvp(cmd[0], cmd)
    except FileNotFoundError as exc:
        if exc.filename is None:
            exc.filename = cmd[0]
        raise

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
